import argparse
import os
from pathlib import Path
import re
import sys

def take_input():
    parser = argparse.ArgumentParser(description="Blue team log analyzer CLI")
    parser.add_argument("path", help="Path to the log file")
    parser.add_argument("--save", action="store_true", help="Save the summarized output")
    parser.add_argument("--format", choices=["txt", "json", "csv"], default="txt", help="Output format")
    args = parser.parse_args()
    return args


def read_log(path):
    if not os.path.exists(path):
        print(f"Error: File '{path}' not found.")
        sys.exit(1)

    with open(path, "r") as f:
        log_content = f.read()

    return log_content


def save_log(args, summary):
    # Create summary directory if it doesn't exist
    summary_dir = "summary"
    os.makedirs(summary_dir, exist_ok=True)
    
    # Get filename without extension
    filename = Path(args.path).stem
    
    # Create the save path in the summary folder
    save_path = os.path.join(summary_dir, f"{filename}_summary.{args.format}")
    
    with open(save_path, "w") as f:
        f.write(summary)
    print(f"\nSummary saved to {save_path}")


def parse_logs(log_file_path, regex_pattern):
    """
    Parses a full log file using an AI-generated regex.
    
    Args:
        log_file_path: path to the log file
        regex_pattern: regex string generated by AI
    
    Returns:
        List of dicts, each dict is a parsed log entry
    """
    pattern = re.compile(regex_pattern)
    parsed_logs = []

    with open(log_file_path) as f:
        for line in f:
            line = line.strip()
            if not line:
                continue
            match = pattern.match(line)
            if match:
                parsed_logs.append(match.groupdict())
            else:
                # optional: track unparsed lines
                parsed_logs.append({"unparsed": line})

    return parsed_logs


